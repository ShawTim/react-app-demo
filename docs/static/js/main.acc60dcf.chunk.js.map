{"version":3,"sources":["features/github/api.ts","features/github/slice.ts","features/error/slice.ts","app/store.ts","components/Nav/index.tsx","pages/Home/index.tsx","app/hooks.ts","components/DataList/index.tsx","pages/Repos/index.tsx","pages/Files/index.tsx","components/ErrorBar/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["fetchUserRepos","username","a","fetch","response","json","body","ok","Error","message","statusText","fetchRepoFiles","full_name","fetchReadme","download_url","initialState","repos","files","readmes","createAsyncThunk","fetchUserReposAPI","fetchRepoFilesAPI","fetchReadmeAPI","githubSlice","createSlice","name","reducers","clear","extraReducers","builder","addCase","fulfilled","state","action","meta","arg","payload","actions","errorSlice","setError","clearError","rejected","error","history","createBrowserHistory","rootReducer","combineReducers","router","connectRouter","errorReducer","github","githubReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","routerMiddleware","Nav","props","repo","Breadcrumb","Item","linkAs","Link","linkProps","to","className","active","defaultProps","Home","useHistory","useState","setUsername","onUsernameChange","useCallback","ev","target","value","onQueryBtnClick","push","InputGroup","Prepend","Text","id","FormControl","placeholder","aria-label","aria-describedby","onChange","Button","variant","onClick","useAppDispatch","useDispatch","useAppSelector","useSelector","DataList","children","page","setPage","pageIndexes","Array","Math","ceil","length","fill","map","_","i","start","ListGroup","slice","Pagination","p","activeLabel","Repos","dispatch","useParams","hasCache","useEffect","onRepoClick","description","Files","fullName","readmeFile","find","file","path","readme","hasFilesCache","hasReadmeCache","sortedFiles","useMemo","filter","type","Card","Header","Body","ErrorBar","Alert","App","Container","fluid","exact","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.acc60dcf.chunk.js","sourcesContent":["export const fetchUserRepos = async (username: string) => {\n  if (!username) return [];\n\n  const response = await fetch(`https://api.github.com/users/${username}/repos`);\n  const body = await response.json();\n  if (!response.ok) throw new Error(body.message ?? response.statusText);\n  return body;\n}\n\nexport const fetchRepoFiles = async (full_name: string) => {\n  if (!full_name) return [];\n\n  const response = await fetch(`https://api.github.com/repos/${full_name}/contents`);\n  const body = await response.json();\n  if (!response.ok) throw new Error(body.message ?? response.statusText);\n  return body;\n}\n\nexport const fetchReadme = async (download_url: string) => {\n  if (!download_url) return \"\";\n\n  const response = await fetch(download_url);\n  const body = await response.json();\n  if (!response.ok) throw new Error(body.message ?? response.statusText);\n  return body;\n}","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  fetchUserRepos as fetchUserReposAPI,\n  fetchRepoFiles as fetchRepoFilesAPI,\n  fetchReadme as fetchReadmeAPI,\n} from './api';\n\nexport type GithubRepo = {\n  id: number,\n  name: string,\n  description: string,\n  full_name: string,\n  html_url: string,\n};\nexport type GithubFile = {\n  name: string,\n  path: string,\n  size: number,\n  download_url: string | null,\n  type: 'file' | 'dir',\n};\n\nexport type GithubState = {\n  repos: {\n    [username: string]: Array<GithubRepo>,\n  },\n  files: {\n    [full_name: string]: Array<GithubFile>,\n  },\n  readmes: {\n    [download_url: string]: string,\n  },\n};\n\nconst initialState: GithubState = {\n  repos: {},\n  files: {},\n  readmes: {},\n};\n\nexport const fetchUserRepos = createAsyncThunk(\n  'github/fetchUserRepos',\n  async (username: string) => await fetchUserReposAPI(username),\n);\nexport const fetchRepoFiles = createAsyncThunk(\n  'github/fetchRepoFiles',\n  async (full_name: string) => await fetchRepoFilesAPI(full_name),\n);\nexport const fetchReadme = createAsyncThunk(\n  'github/fetchReadme',\n  async (download_url: string) => await fetchReadmeAPI(download_url),\n);\n\nexport const githubSlice = createSlice({\n  name: 'github',\n  initialState,\n  reducers: {\n    clear: () => initialState,\n  },\n  extraReducers: (builder) => builder\n    .addCase(fetchUserRepos.fulfilled, (state, action) => {\n      const username = action.meta.arg;\n      if (username) {\n        state.repos[username] = action.payload;\n      }\n    })\n    .addCase(fetchRepoFiles.fulfilled, (state, action) => {\n      const full_name = action.meta.arg;\n      if (full_name) {\n        state.files[full_name] = action.payload;\n      }\n    })\n    .addCase(fetchReadme.fulfilled, (state, action) => {\n      const download_url = action.meta.arg;\n      if (download_url) {\n        state.readmes[download_url] = action.payload;\n      }\n    }),\n});\n\nexport const { clear } = githubSlice.actions;\n\nexport default githubSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { fetchUserRepos, fetchRepoFiles, fetchReadme } from '@features/github/slice';\n\nexport type ErrorState = {\n  message: string;\n};\n\nconst initialState: ErrorState = {\n  message: \"\",\n};\n\nexport const errorSlice = createSlice({\n  name: 'error',\n  initialState,\n  reducers: {\n    setError: (state, action: PayloadAction<string>) => {\n      state.message = action.payload || \"\";\n    },\n    clearError: (state) => initialState,\n  },\n  extraReducers: (builder) => builder\n    .addCase(fetchUserRepos.rejected, (state, action) => {\n      state.message = action.error.message || \"\";\n    })\n    .addCase(fetchRepoFiles.rejected, (state, action) => {\n      state.message = action.error.message || \"\";\n    })\n    .addCase(fetchReadme.rejected, (state, action) => {\n      state.message = action.error.message || \"\";\n    }),\n});\n\nexport const { setError, clearError } = errorSlice.actions;\n\nexport default errorSlice.reducer;\n","import { configureStore, combineReducers, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { createBrowserHistory } from 'history';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport errorReducer from '@features/error/slice';\nimport githubReducer from '@features/github/slice';\n\nexport const history = createBrowserHistory();\n\nexport const rootReducer = combineReducers({\n  router: connectRouter(history),\n  error: errorReducer,\n  github: githubReducer,\n});\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(routerMiddleware(history)),\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import React from 'react';\nimport { Breadcrumb } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nexport type NavProps = {\n  username: string,\n  repo: string,\n};\n\nconst defaultProps: NavProps = {\n  username: \"\",\n  repo: \"\",\n}\n\nconst Nav = (props: NavProps) => {\n  const { username, repo } = props;\n\n  if (username && repo) {\n    return (\n      <Breadcrumb>\n        <Breadcrumb.Item linkAs={Link} linkProps={{ to: \"/\" }}><i className=\"bi bi-house\"></i> Home</Breadcrumb.Item>\n        <Breadcrumb.Item linkAs={Link} linkProps={{ to: `/repos/${username}` }}><i className=\"bi bi-github\"></i> {username}</Breadcrumb.Item>\n        <Breadcrumb.Item active><i className=\"bi bi-code\"></i> {repo}</Breadcrumb.Item>\n      </Breadcrumb>\n    )\n  }\n\n  if (username) {\n    return (\n      <Breadcrumb>\n        <Breadcrumb.Item linkAs={Link} linkProps={{ to: \"/\" }}><i className=\"bi bi-house\"></i> Home</Breadcrumb.Item>\n        <Breadcrumb.Item active><i className=\"bi bi-github\"></i> {username}</Breadcrumb.Item>\n      </Breadcrumb>\n    )\n  }\n\n  return (\n    <Breadcrumb>\n      <Breadcrumb.Item active><i className=\"bi bi-house\"></i> Home</Breadcrumb.Item>\n    </Breadcrumb>\n  )\n};\n\nNav.defaultProps = defaultProps;\n\nexport default Nav;","import React, { useState, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { InputGroup, FormControl, Button } from 'react-bootstrap';\nimport Nav from '@components/Nav';\n\nconst Home = () => {\n  const history = useHistory();\n  const [username, setUsername] = useState(\"\");\n\n  const onUsernameChange = useCallback((ev: React.ChangeEvent<HTMLInputElement>) => setUsername(ev.target.value), [setUsername]);\n  const onQueryBtnClick = useCallback(() => history.push(`/repos/${username}`), [username, history]);\n\n  return (\n    <>\n      <Nav />\n      <InputGroup className=\"mb-3\">\n        <InputGroup.Prepend>\n          <InputGroup.Text id=\"username-desc\">\n            <i className=\"bi bi-github\"></i>\n          </InputGroup.Text>\n        </InputGroup.Prepend>\n        <FormControl\n          value={username}\n          placeholder=\"Username\"\n          aria-label=\"Username\"\n          aria-describedby=\"username-desc\"\n          onChange={onUsernameChange} />\n      </InputGroup>\n      <Button variant=\"primary\" onClick={onQueryBtnClick}>Query user repos</Button>\n    </>\n  );\n};\n\nexport default Home;","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { useState } from 'react';\nimport { ListGroup, Pagination } from 'react-bootstrap';\n\nexport type DataListProps = {\n  children: React.ReactNode[],\n};\n\nconst defaultProps: DataListProps = {\n  children: [],\n}\n\nexport const PAGE_SIZE = 10;\n\nconst DataList = (props: DataListProps) => {\n  const { children } = props;\n  const [page, setPage] = useState(0);\n  \n  const pageIndexes = new Array(Math.ceil(children.length/PAGE_SIZE)).fill(0).map((_, i) => i);\n  const start = page * PAGE_SIZE;\n\n  return children.length ? (\n    <>\n      <ListGroup className=\"data-list mb-3\">\n        {children.slice(start, start + PAGE_SIZE)}\n      </ListGroup>\n      <Pagination className=\"data-pagination\">\n        {pageIndexes.map((p) =>\n          <Pagination.Item\n            key={`page-${p}`}\n            active={page === p}\n            activeLabel=\"\"\n            onClick={() => setPage(p)}>\n            {p + 1}\n          </Pagination.Item>\n        )}\n      </Pagination>\n    </>\n  ) : null;\n};\n\nDataList.defaultProps = defaultProps;\n\nexport default DataList;","import React, { useCallback, useEffect } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { ListGroup } from 'react-bootstrap';\n\nimport { useAppDispatch, useAppSelector } from '@base/app/hooks';\nimport { clearError } from '@features/error/slice';\nimport { fetchUserRepos } from '@features/github/slice';\nimport Nav from '@components/Nav';\nimport DataList from '@components/DataList';\n\nimport './style.scss';\n\nconst Repos = () => {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  const { username } = useParams<{ username: string }>();\n  const repos = useAppSelector((state) => state.github.repos[username] ?? []);\n  const hasCache = !!repos.length;\n\n  // clear error when leave the page\n  useEffect(() => () => {\n    dispatch(clearError());\n  }, [dispatch]);\n\n  // query user repo when enter the page if it's not cached\n  useEffect(() => {\n    !hasCache && dispatch(fetchUserRepos(username));\n  }, [username, hasCache, dispatch]);\n\n  const onRepoClick = useCallback((full_name: string) => history.push(`/files/${full_name}`), [history]);\n\n  return (\n    <>\n      <Nav username={username} />\n      <DataList>\n        {repos.map((repo) =>\n          <ListGroup.Item\n            key={repo.id}\n            action\n            onClick={() => onRepoClick(repo.full_name)}>\n            <label className=\"repo-name\"><i className=\"bi bi-code\"></i> {repo.name}</label>\n            <span className=\"repo-desc\">{repo.description}</span>\n          </ListGroup.Item>\n        )}\n      </DataList>\n    </>\n  );\n};\n\nexport default Repos;","import React, { useEffect, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { ListGroup, Card } from 'react-bootstrap';\nimport ReactMarkdown from 'react-markdown';\n\nimport { useAppDispatch, useAppSelector } from '@base/app/hooks';\nimport { clearError } from '@features/error/slice';\nimport { fetchRepoFiles, fetchReadme } from '@features/github/slice';\nimport Nav from '@base/components/Nav';\nimport DataList from '@base/components/DataList';\n\nimport './style.scss';\n\nconst Files = () => {\n  const dispatch = useAppDispatch();\n  const { username, repo } = useParams<{ username: string, repo: string }>();\n  const fullName = `${username}/${repo}`;\n  const files = useAppSelector((state) => state.github.files[fullName] ?? []);\n  const readmeFile = files.find((file) => file.path === \"README.md\");\n  const readme = useAppSelector((state) => state.github.readmes?.[readmeFile?.download_url ?? \"\"] ?? \"\");\n  const hasFilesCache = !!files.length;\n  const hasReadmeCache = !!readme;\n\n  // clear error when leave the page\n  useEffect(() => () => {\n    dispatch(clearError());\n  }, [dispatch]);\n\n  // query repo files when enter the page if it's not cached\n  useEffect(() => {\n    !hasFilesCache && dispatch(fetchRepoFiles(fullName));\n  }, [fullName, hasFilesCache, dispatch]);\n\n  // query readme content when README.md exists if it's not cached\n  useEffect(() => {\n    readmeFile?.download_url && !hasReadmeCache && dispatch(fetchReadme(readmeFile?.download_url));\n  }, [readmeFile, hasReadmeCache, dispatch]);\n\n  const sortedFiles = useMemo(() => files.filter((file) => file.type === \"dir\").concat(files.filter((file) => file.type !== \"dir\")), [files]);\n\n  return (\n    <>\n      <Nav username={username} repo={repo} />\n      <DataList>\n        {sortedFiles.map((file) =>\n          <ListGroup.Item key={file.path}>\n            <i className={`bi bi-${file.type === \"dir\" ? \"folder-fill\" : \"file-earmark\"}`}></i>\n            <span>&nbsp;</span>\n            <label className=\"file-name\">{file.type === \"dir\" ? `${file.name}/` : file.name}</label>\n          </ListGroup.Item>\n        )}\n      </DataList>\n      {readmeFile?.download_url && (\n        <Card>\n          <Card.Header>README.md</Card.Header>\n          <Card.Body>\n            <ReactMarkdown children={readme} />\n          </Card.Body>\n        </Card>\n      )}\n    </>\n  );\n};\n\nexport default Files;","import React from 'react';\nimport { Alert } from 'react-bootstrap';\n\nimport { useAppSelector } from '@base/app/hooks';\n\nconst ErrorBar = () => {\n  const message = useAppSelector((state) => state.error.message);\n\n  return message ? <Alert variant=\"danger\"><i className=\"bi bi-exclamation-triangle-fill\"></i> {message}</Alert> : null;\n};\n\nexport default ErrorBar;","import React from 'react';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { Route, Switch } from 'react-router';\nimport { Container } from 'react-bootstrap';\n\nimport { history } from '@base/app/store';\nimport Home from '@pages/Home';\nimport Repos from '@pages/Repos';\nimport Files from '@pages/Files';\nimport ErrorBar from '@components/ErrorBar';\n\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <Container fluid=\"sm\">\n      <ErrorBar />\n      <ConnectedRouter history={history}>\n        <Switch>\n          <Route exact path=\"/repos/:username\" render={() => <Repos />} />\n          <Route exact path=\"/files/:username/:repo\" render={() => <Files />} />\n          <Route path=\"/\" render={() => <Home />} />\n        </Switch>\n      </ConnectedRouter>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from '@base/app/store';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}